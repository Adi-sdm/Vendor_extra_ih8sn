From bbbd7b256bf7f33a21bacbf53da60bf716db88be Mon Sep 17 00:00:00 2001
From: Evgeny Astigeevich <evgeny.astigeevich@linaro.org>
Date: Wed, 17 Jun 2020 12:34:19 +0100
Subject: [PATCH 11/27] ART: Add recognition of optimized HRems in BCE

The instruction simplifier can optimized HRems into
HDiv+HMul+HSub or HDiv+HShl+HAdd(HSub)+HSub.
Developers can also manually optimized them.
This prevents BCE from assigning ranges and eliminating
bound checks.

This CL adds recognition of such optimized HRems to BCE.

Test: 449-checker-bce-rem
Test: test.py --host --optimizing --jit --gtest --interpreter
Test: test.py --target --optimizing --jit --interpreter
Test: run-gtests.sh
Change-Id: Ief23dcb029e3a03b5e60d4388fcbb84e143a9ea5
Signed-off-by: Jake Weinstein <jake@aospa.co>
---
 .../optimizing/bounds_check_elimination.cc    | 101 +++
 test/449-checker-bce-rem/expected.txt         |   0
 test/449-checker-bce-rem/info.txt             |   2 +
 test/449-checker-bce-rem/src/Main.java        | 645 ++++++++++++++++++
 4 files changed, 748 insertions(+)
 create mode 100644 test/449-checker-bce-rem/expected.txt
 create mode 100644 test/449-checker-bce-rem/info.txt
 create mode 100644 test/449-checker-bce-rem/src/Main.java

diff --git a/compiler/optimizing/bounds_check_elimination.cc b/compiler/optimizing/bounds_check_elimination.cc
index e35d50220e..6f67662fe4 100644
--- a/compiler/optimizing/bounds_check_elimination.cc
+++ b/compiler/optimizing/bounds_check_elimination.cc
@@ -1001,6 +1001,103 @@ class BCEVisitor : public HGraphVisitor {
     }
   }
 
+  // Check whether HSub is a result of the HRem optimization of:
+  //   q = Div(dividend, const_divisor)
+  //   r = Rem(dividend, const_divisor)
+  // into
+  //   q = Div(dividend, const_divisor)
+  //   t = Mul(q, const_divisor)
+  //   r = Sub(dividend, t)
+  // or for divisors 2^n + 1 into
+  //   q  = Div(dividend, const_divisor)
+  //   t1 = Shl(q, n)
+  //   t2 = Add(q, t1)
+  //   r  = Sub(dividend, t2)
+  // or for divisors 2^n - 1 into
+  //   q  = Div(dividend, const_divisor)
+  //   t1 = Shl(q, n)
+  //   t2 = Sub(t1, q)
+  //   r  = Sub(dividend, t2)
+  //
+  // If it is the case, the value range for the instruction is
+  // [1 - abs(const_divisor), abs(const_divisor) - 1] merged with
+  // the range of the left input is assigned and true is returned. Otherwise,
+  // no range is assigned and false is returned.
+  bool TryToAssignRangeIfOptimizedRemWithConstantDivisor(HSub* instruction) {
+    if (instruction->GetResultType() != DataType::Type::kInt32) {
+      return false;
+    }
+
+    auto is_needed_shl = [](HShl* shl) {
+      return shl != nullptr && shl->GetRight()->IsConstant() && shl->GetLeft()->IsDiv();
+    };
+
+    HDiv* div = nullptr;
+    int64_t const_divisor = 0;
+    if (HMul* mul = instruction->GetRight()->AsMul()) {
+      if (!mul->GetLeft()->IsDiv() || !mul->GetRight()->IsConstant()) {
+        return false;
+      }
+      div = mul->GetLeft()->AsDiv();
+      const_divisor = Int64FromConstant(mul->GetRight()->AsConstant());
+    } else if (HAdd* add = instruction->GetRight()->AsAdd()) {
+      HShl* shl = add->GetRight()->AsShl();
+      if (!is_needed_shl(shl)) {
+        return false;
+      }
+
+      div = shl->GetLeft()->AsDiv();
+      if (add->GetLeft() != div) {
+        return false;
+      }
+
+      int32_t n = shl->GetRight()->AsIntConstant()->GetValue();
+      if (n == BitSizeOf<int32_t>() - 1) {
+        // 2^n + 1 will be negative.
+        return false;
+      }
+      const_divisor = (1LL << n) + 1;
+    } else if (HSub* sub = instruction->GetRight()->AsSub()) {
+      HShl* shl = sub->GetLeft()->AsShl();
+      if (!is_needed_shl(shl)) {
+        return false;
+      }
+
+      div = shl->GetLeft()->AsDiv();
+      if (sub->GetRight() != div) {
+        return false;
+      }
+
+      int32_t n = shl->GetRight()->AsIntConstant()->GetValue();
+      const_divisor = (1LL << n) - 1;
+    }
+
+    if (div == nullptr || !IsInt64Value(div->GetRight()->AsConstant(), const_divisor) ||
+        div->GetLeft() != instruction->GetLeft()) {
+      return false;
+    }
+
+    ValueRange* range = nullptr;
+    if (const_divisor == DataType::MinValueOfIntegralType(DataType::Type::kInt32)) {
+      range = new (&allocator_) ValueRange(&allocator_,
+          ValueBound(nullptr, DataType::MinValueOfIntegralType(DataType::Type::kInt32) + 1),
+          ValueBound(nullptr, DataType::MaxValueOfIntegralType(DataType::Type::kInt32)));
+    } else {
+      DCHECK_GT(const_divisor, DataType::MinValueOfIntegralType(DataType::Type::kInt32));
+      DCHECK_LE(const_divisor, DataType::MaxValueOfIntegralType(DataType::Type::kInt32));
+      int32_t abs_const_divisor = static_cast<int32_t>(std::abs(const_divisor));
+      range = new (&allocator_) ValueRange(&allocator_,
+                                           ValueBound(nullptr, 1 - abs_const_divisor),
+                                           ValueBound(nullptr, abs_const_divisor - 1));
+    }
+    HBasicBlock* basic_block = instruction->GetBlock();
+    if (ValueRange* left_range = LookupValueRange(instruction->GetLeft(), basic_block)) {
+      range = range->Narrow(left_range);
+    }
+    AssignRange(basic_block, instruction, range);
+    return true;
+  }
+
   void VisitAdd(HAdd* add) override {
     HInstruction* right = add->GetRight();
     if (right->IsIntConstant()) {
@@ -1016,6 +1113,10 @@ class BCEVisitor : public HGraphVisitor {
   }
 
   void VisitSub(HSub* sub) override {
+    if (TryToAssignRangeIfOptimizedRemWithConstantDivisor(sub)) {
+      return;
+    }
+
     HInstruction* left = sub->GetLeft();
     HInstruction* right = sub->GetRight();
     if (right->IsIntConstant()) {
diff --git a/test/449-checker-bce-rem/expected.txt b/test/449-checker-bce-rem/expected.txt
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test/449-checker-bce-rem/info.txt b/test/449-checker-bce-rem/info.txt
new file mode 100644
index 0000000000..946f38faea
--- /dev/null
+++ b/test/449-checker-bce-rem/info.txt
@@ -0,0 +1,2 @@
+Checker test for BCE optimizations of integer remainder operations which are optimized into
+HDiv+HMul+HSub or HDiv+HShl+HAdd+HSub or HDiv+HShl+HSub+HSub.
diff --git a/test/449-checker-bce-rem/src/Main.java b/test/449-checker-bce-rem/src/Main.java
new file mode 100644
index 0000000000..f7d6f66929
--- /dev/null
+++ b/test/449-checker-bce-rem/src/Main.java
@@ -0,0 +1,645 @@
+/*
+ * Copyright (C) 2020 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+public class Main {
+  private static void expectEquals(long expected, long result) {
+    if (expected != result) {
+      throw new Error("Expected: " + expected + ", found: " + result);
+    }
+  }
+
+  private static void remInt() {
+    expectEquals(1L << 32, $noinline$IntRemBy3(3));
+    expectEquals((3L << 32) | 6, $noinline$IntRemBy7(27));
+    expectEquals((1L << 32) | 1, $noinline$IntRemBy12(13));
+    expectEquals((1L << 32) | 1, $noinline$IntRemBy12A(13));
+  }
+
+  // A test case to check:
+  //  BCE detects the optimized 'v % 3' and eliminates bounds checks.
+  //
+  /// CHECK-START:       long Main.$noinline$IntRemBy3(int) BCE (before)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Add
+  /// CHECK-NEXT:            Sub
+  /// CHECK:                 BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  //
+  /// CHECK-START:       long Main.$noinline$IntRemBy3(int) BCE (after)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Add
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NOT:             BoundsCheck
+  /// CHECK:                 ArrayGet
+  private static long $noinline$IntRemBy3(int v) {
+    int[] values = {0, 1, 2};
+    if (v > 0) {
+      int q = v / 3;
+      int r = v % 3;
+      return ((long)q << 32) | values[r];
+    } else {
+      return -1;
+    }
+  }
+
+  // A test case to check:
+  //  BCE detects the optimized 'v % 7' and eliminates bounds checks.
+  //
+  /// CHECK-START:       long Main.$noinline$IntRemBy7(int) BCE (before)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            Sub
+  /// CHECK:                 BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  //
+  /// CHECK-START:       long Main.$noinline$IntRemBy7(int) BCE (after)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NOT:             BoundsCheck
+  /// CHECK:                 ArrayGet
+  private static long $noinline$IntRemBy7(int v) {
+    int[] values = {0, 1, 2, 3, 4, 5, 6};
+    if (v > 0) {
+      int q = v / 7;
+      int r = v % 7;
+      return ((long)q << 32) | values[r];
+    } else {
+      return -1;
+    }
+  }
+
+  // A test case to check:
+  //  BCE detects the optimized 'v % 12' and eliminates bounds checks.
+  //
+  /// CHECK-START:       long Main.$noinline$IntRemBy12(int) BCE (before)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Mul
+  /// CHECK-NEXT:            Sub
+  /// CHECK:                 BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  //
+  /// CHECK-START:       long Main.$noinline$IntRemBy12(int) BCE (after)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Mul
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NOT:             BoundsCheck
+  /// CHECK:                 ArrayGet
+  private static long $noinline$IntRemBy12(int v) {
+    int[] values = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};
+    if (v > 0) {
+      int q = v / 12;
+      int r = v % 12;
+      return ((long)q << 32) | values[r];
+    } else {
+      return -1;
+    }
+  }
+
+  // A test case to check:
+  //  BCE detects the optimized 'v % 12' and eliminates bounds checks.
+  //
+  /// CHECK-START:       long Main.$noinline$IntRemBy12A(int) BCE (before)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Mul
+  /// CHECK-NEXT:            Sub
+  /// CHECK:                 BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  //
+  /// CHECK-START:       long Main.$noinline$IntRemBy12A(int) BCE (after)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Mul
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NOT:             BoundsCheck
+  /// CHECK:                 ArrayGet
+  private static long $noinline$IntRemBy12A(int v) {
+    int[] values = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};
+    if (v > 0) {
+      int q = v / 12;
+      int t = q * 12;
+      int r = v  - t;
+      return ((long)q << 32) | values[r];
+    } else {
+      return -1;
+    }
+  }
+
+  // A test case to check:
+  //  BCE detects the optimized 'v % Integer.MAX_VALUE' and eliminates bounds checks.
+  //
+  /// CHECK-START:       int Main.$noinline$IntRemByMaxInt(int) BCE (before)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            Sub
+  /// CHECK:                 BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  //
+  /// CHECK-START:       int Main.$noinline$IntRemByMaxInt(int) BCE (after)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NOT:             BoundsCheck
+  /// CHECK:                 ArrayGet
+  private static int $noinline$IntRemByMaxInt(int v) {
+    int[] values = new int[Integer.MAX_VALUE];
+    if (v > 0) {
+      int q = v / Integer.MAX_VALUE;
+      int r = v % Integer.MAX_VALUE;
+      return values[v % Integer.MAX_VALUE] + q;
+    } else {
+      return -1;
+    }
+  }
+
+  // A test case to check:
+  //  BCE detects the optimized 'v % Integer.MIN_VALUE' and eliminates bounds checks.
+  //
+  /// CHECK-START:       int Main.$noinline$IntRemByMinInt(int) BCE (before)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Mul
+  /// CHECK-NEXT:            Sub
+  /// CHECK:                 BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  //
+  /// CHECK-START:       int Main.$noinline$IntRemByMinInt(int) BCE (after)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Mul
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NOT:             BoundsCheck
+  /// CHECK:                 ArrayGet
+  private static int $noinline$IntRemByMinInt(int v) {
+    int[] values = new int[Integer.MAX_VALUE];
+    if (v > 0) {
+      int q = v / Integer.MIN_VALUE;
+      int t = q * Integer.MIN_VALUE;
+      int r = v - t;
+      return values[r - 1];
+    } else {
+      return -1;
+    }
+  }
+
+  // A test case to check:
+  //  Bounds checks are not eliminated if the checked value is not an optimized HDiv+HRem.
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem01(int, int) BCE (before)
+  /// CHECK:                 Mul
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem01(int, int) BCE (after)
+  /// CHECK:                 Mul
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  private static int $noinline$NoRem01(int v, int s) {
+    int[] values = {0, 1, 2};
+    if (v > 0) {
+      int a = v * 10;
+      int b = s - a;
+      return values[b];
+    } else {
+      return -1;
+    }
+  }
+
+  // A test case to check:
+  //  Bounds checks are not eliminated if the checked value is not an optimized HDiv+HRem.
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem02(int, int) BCE (before)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Mul
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem02(int, int) BCE (after)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Mul
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  private static int $noinline$NoRem02(int v, int s) {
+    int[] values = {0, 1, 2};
+    if (v > 0) {
+      int q = v / 10;
+      int a = q * s;
+      int b = v - a;
+      return values[b];
+    } else {
+      return -1;
+    }
+  }
+
+  // A test case to check:
+  //  Bounds checks are not eliminated if the checked value is not an optimized HDiv+HRem.
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem03(int, int) BCE (before)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Add
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem03(int, int) BCE (after)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Add
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  private static int $noinline$NoRem03(int v, int s) {
+    int[] values = {0, 1, 2};
+    if (v > 0) {
+      int q = v / 10;
+      int a = q + s;
+      int b = v - a;
+      return values[b];
+    } else {
+      return -1;
+    }
+  }
+
+  // A test case to check:
+  //  Bounds checks are not eliminated if the checked value is not an optimized HDiv+HRem.
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem04(int, int) BCE (before)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Add
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem04(int, int) BCE (after)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Add
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  private static int $noinline$NoRem04(int v, int s) {
+    int[] values = {0, 1, 2};
+    if (v > 0) {
+      int q = v / 10;
+      int t = q << s;
+      int a = q + t;
+      int b = v - a;
+      return values[b];
+    } else {
+      return -1;
+    }
+  }
+
+  // A test case to check:
+  //  Bounds checks are not eliminated if the checked value is not an optimized HDiv+HRem.
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem05(int, int) BCE (before)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Add
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem05(int, int) BCE (after)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Add
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  private static int $noinline$NoRem05(int v, int s) {
+    int[] values = {0, 1, 2};
+    if (v > 0) {
+      int q = v / 10;
+      int t = s << 1;
+      int a = q + t;
+      int b = v - a;
+      return values[b];
+    } else {
+      return -1;
+    }
+  }
+
+  // A test case to check:
+  //  Bounds checks are not eliminated if the checked value is not an optimized HDiv+HRem.
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem06(int, int) BCE (before)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Mul
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem06(int, int) BCE (after)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Mul
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  private static int $noinline$NoRem06(int v, int s) {
+    int[] values = {0, 1, 2};
+    if (v > 0) {
+      int q = v / 10;
+      int a = q * 11;
+      int b = v - a;
+      return values[b];
+    } else {
+      return -1;
+    }
+  }
+
+  // A test case to check:
+  //  Bounds checks are not eliminated if the checked value is not an optimized HDiv+HRem.
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem07(int, int) BCE (before)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Add
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem07(int, int) BCE (after)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Add
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  private static int $noinline$NoRem07(int v, int s) {
+    int[] values = {0, 1, 2};
+    if (v > 0) {
+      int q = v / 10;
+      int t = q << 1;
+      int a = s + t;
+      int b = v - a;
+      return values[b];
+    } else {
+      return -1;
+    }
+  }
+
+  // A test case to check:
+  //  Bounds checks are not eliminated if the checked value is not an optimized HDiv+HRem.
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem08(int, int) BCE (before)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Add
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem08(int, int) BCE (after)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Add
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  private static int $noinline$NoRem08(int v, int s) {
+    int[] values = {0, 1, 2};
+    if (v > 0) {
+      int q = v / 10;
+      int t = q << 31;
+      int a = q + t;
+      int b = v - a;
+      return values[b];
+    } else {
+      return -1;
+    }
+  }
+
+  // A test case to check:
+  //  Bounds checks are not eliminated if the checked value is not an optimized HDiv+HRem.
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem09(int, int) BCE (before)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Add
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem09(int, int) BCE (after)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Add
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  private static int $noinline$NoRem09(int v, int s) {
+    int[] values = {0, 1, 2};
+    if (v > 0) {
+      int q = v / 10;
+      int t = q << 1;
+      int a = q + t;
+      int b = v - a;
+      return values[b];
+    } else {
+      return -1;
+    }
+  }
+
+  // A test case to check:
+  //  Bounds checks are not eliminated if the checked value is not an optimized HDiv+HRem.
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem10(int, int) BCE (before)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem10(int, int) BCE (after)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  private static int $noinline$NoRem10(int v, int s) {
+    int[] values = {0, 1, 2};
+    if (v > 0) {
+      int q = v / 10;
+      int t = q << s;
+      int a = t - q;
+      int b = v - a;
+      return values[b];
+    } else {
+      return -1;
+    }
+  }
+
+  // A test case to check:
+  //  Bounds checks are not eliminated if the checked value is not an optimized HDiv+HRem.
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem11(int, int) BCE (before)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem11(int, int) BCE (after)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  private static int $noinline$NoRem11(int v, int s) {
+    int[] values = {0, 1, 2};
+    if (v > 0) {
+      int q = v / 10;
+      int t = s << 1;
+      int a = t - q;
+      int b = v - a;
+      return values[b];
+    } else {
+      return -1;
+    }
+  }
+
+  // A test case to check:
+  //  Bounds checks are not eliminated if the checked value is not an optimized HDiv+HRem.
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem12(int, int) BCE (before)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem12(int, int) BCE (after)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  private static int $noinline$NoRem12(int v, int s) {
+    int[] values = {0, 1, 2};
+    if (v > 0) {
+      int q = v / 10;
+      int t = q << 1;
+      int a = t - s;
+      int b = v - a;
+      return values[b];
+    } else {
+      return -1;
+    }
+  }
+
+  // A test case to check:
+  //  Bounds checks are not eliminated if the checked value is not an optimized HDiv+HRem.
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem13(int, int) BCE (before)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem13(int, int) BCE (after)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Shl
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  private static int $noinline$NoRem13(int v, int s) {
+    int[] values = {0, 1, 2};
+    if (v > 0) {
+      int q = v / 10;
+      int t = q << 31;
+      int a = t - q;
+      int b = v - a;
+      return values[b];
+    } else {
+      return -1;
+    }
+  }
+
+  // A test case to check:
+  //  Bounds checks are not eliminated if the checked value is not an optimized HDiv+HRem.
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem14(int, int) BCE (before)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem14(int, int) BCE (after)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  private static int $noinline$NoRem14(int v, int s) {
+    int[] values = {0, 1, 2};
+    if (v > 0) {
+      int a = v / 10;
+      int b = s - a;
+      return values[b];
+    } else {
+      return -1;
+    }
+  }
+
+  // A test case to check:
+  //  Bounds checks are not eliminated if the checked value is not an optimized HDiv+HRem.
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem15(int, int) BCE (before)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Mul
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  //
+  /// CHECK-START:       int Main.$noinline$NoRem15(int, int) BCE (after)
+  /// CHECK:                 Div
+  /// CHECK-NEXT:            Mul
+  /// CHECK-NEXT:            Sub
+  /// CHECK-NEXT:            BoundsCheck
+  /// CHECK-NEXT:            ArrayGet
+  private static int $noinline$NoRem15(int v, int s) {
+    int[] values = {0, 1, 2};
+    if (v > 0) {
+      int q = v / 10;
+      int a = q * 10;
+      int b = s - a;
+      return values[b];
+    } else {
+      return -1;
+    }
+  }
+
+  public static void main(String args[]) {
+    remInt();
+  }
+}
-- 
2.31.1


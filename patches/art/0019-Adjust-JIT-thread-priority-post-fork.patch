From 577f6b205be8e17885394698ac2758e0a921e162 Mon Sep 17 00:00:00 2001
From: Nicolas Geoffray <ngeoffray@google.com>
Date: Thu, 27 Aug 2020 15:21:11 +0100
Subject: [PATCH 19/27] Adjust JIT thread priority post-fork.

Bug: 166406877
Test: test.py
Change-Id: I81c9a231213e62a1aeaa67cfe8c38419f5bddcd0
Signed-off-by: Jake Weinstein <jake@aospa.co>
---
 runtime/jit/jit.cc     |  1 +
 runtime/jit/jit.h      |  4 ++++
 runtime/runtime.cc     | 10 ++++++++--
 runtime/thread_pool.cc | 18 ++++++++++++++++++
 runtime/thread_pool.h  | 11 +++++++++--
 5 files changed, 40 insertions(+), 4 deletions(-)

diff --git a/runtime/jit/jit.cc b/runtime/jit/jit.cc
index 0610f6d073..5d6e47f56a 100644
--- a/runtime/jit/jit.cc
+++ b/runtime/jit/jit.cc
@@ -1801,6 +1801,7 @@ void Jit::PostZygoteFork() {
     CHECK(code_cache_->GetZygoteMap()->IsCompilationNotified());
   }
   thread_pool_->CreateThreads();
+  thread_pool_->SetPthreadPriority(options_->GetThreadPoolPthreadPriority());
 }
 
 void Jit::BootCompleted() {
diff --git a/runtime/jit/jit.h b/runtime/jit/jit.h
index 40a6eb7c74..d7bcd86c59 100644
--- a/runtime/jit/jit.h
+++ b/runtime/jit/jit.h
@@ -272,6 +272,10 @@ class Jit {
       REQUIRES(!lock_)
       REQUIRES_SHARED(Locks::mutator_lock_);
 
+  int GetThreadPoolPthreadPriority() const {
+    return options_->GetThreadPoolPthreadPriority();
+  }
+
   uint16_t OSRMethodThreshold() const {
     return options_->GetOsrThreshold();
   }
diff --git a/runtime/runtime.cc b/runtime/runtime.cc
index 7c6e34c4ed..366c030f7b 100644
--- a/runtime/runtime.cc
+++ b/runtime/runtime.cc
@@ -686,8 +686,14 @@ void Runtime::PreZygoteFork() {
 }
 
 void Runtime::PostZygoteFork() {
-  if (GetJit() != nullptr) {
-    GetJit()->PostZygoteFork();
+  jit::Jit* jit = GetJit();
+  if (jit != nullptr) {
+    jit->PostZygoteFork();
+    // Ensure that the threads in the JIT pool have been created with the right
+    // priority.
+    if (kIsDebugBuild && jit->GetThreadPool() != nullptr) {
+      jit->GetThreadPool()->CheckPthreadPriority(jit->GetThreadPoolPthreadPriority());
+    }
   }
   // Reset all stats.
   ResetStats(0xFFFFFFFF);
diff --git a/runtime/thread_pool.cc b/runtime/thread_pool.cc
index 0dc3a8fed7..50f5eeb2bf 100644
--- a/runtime/thread_pool.cc
+++ b/runtime/thread_pool.cc
@@ -96,6 +96,14 @@ void ThreadPoolWorker::SetPthreadPriority(int priority) {
 #endif
 }
 
+int ThreadPoolWorker::GetPthreadPriority() {
+#if defined(ART_TARGET_ANDROID)
+  return getpriority(PRIO_PROCESS, pthread_gettid_np(pthread_));
+#else
+  return 0;
+#endif
+}
+
 void ThreadPoolWorker::Run() {
   Thread* self = Thread::Current();
   Task* task = nullptr;
@@ -313,4 +321,14 @@ void ThreadPool::SetPthreadPriority(int priority) {
   }
 }
 
+void ThreadPool::CheckPthreadPriority(int priority) {
+#if defined(ART_TARGET_ANDROID)
+  for (ThreadPoolWorker* worker : threads_) {
+    CHECK_EQ(worker->GetPthreadPriority(), priority);
+  }
+#else
+  UNUSED(priority);
+#endif
+}
+
 }  // namespace art
diff --git a/runtime/thread_pool.h b/runtime/thread_pool.h
index b04d4dab4f..b9e5a97cb5 100644
--- a/runtime/thread_pool.h
+++ b/runtime/thread_pool.h
@@ -83,9 +83,12 @@ class ThreadPoolWorker {
 
   virtual ~ThreadPoolWorker();
 
-  // Set the "nice" priorty for this worker.
+  // Set the "nice" priority for this worker.
   void SetPthreadPriority(int priority);
 
+  // Get the "nice" priority for this worker.
+  int GetPthreadPriority();
+
   Thread* GetThread() const { return thread_; }
 
  protected:
@@ -160,9 +163,13 @@ class ThreadPool {
   // thread count of the thread pool.
   void SetMaxActiveWorkers(size_t threads) REQUIRES(!task_queue_lock_);
 
-  // Set the "nice" priorty for threads in the pool.
+  // Set the "nice" priority for threads in the pool.
   void SetPthreadPriority(int priority);
 
+  // CHECK that the "nice" priority of threads in the pool is the given
+  // `priority`.
+  void CheckPthreadPriority(int priority);
+
   // Wait for workers to be created.
   void WaitForWorkersToBeCreated();
 
-- 
2.31.1


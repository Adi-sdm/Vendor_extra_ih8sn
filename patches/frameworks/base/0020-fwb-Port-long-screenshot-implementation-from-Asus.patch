From 235abbf8d5ce1b5daa5fcb6abdbb9d96d5452a22 Mon Sep 17 00:00:00 2001
From: jhenrique09 <jhenrique09.mcz@hotmail.com>
Date: Tue, 13 Aug 2019 09:08:00 -0300
Subject: [PATCH 20/49] fwb: Port long screenshot implementation from Asus

From asus/WW_I001D/ASUS_I001_1:10/QKQ1.190825.002/17.0210.2001.60-0:user/release-keys

Syberia: let's port it to A11 till we haven't native longshot support

Change-Id: Idd3690832210b167d9d2a33069b19ffb43653887
Signed-off-by: DennySPb <dennyspb@gmail.com>
---
 core/java/android/view/IWindowManager.aidl    |  6 ++
 .../custom/screenshot/StitchImageUtility.java | 90 +++++++++++++++++++
 .../internal/util/ScreenshotHelper.java       | 50 +++++++++--
 packages/SystemUI/AndroidManifest.xml         |  3 +
 packages/SystemUI/res/values/config.xml       |  3 +
 .../globalactions/GlobalActionsDialog.java    |  8 +-
 .../screenshot/SaveImageInBackgroundTask.java |  2 +-
 .../statusbar/policy/CastControllerImpl.java  |  6 ++
 .../server/policy/PhoneWindowManager.java     |  5 ++
 .../server/policy/WindowManagerPolicy.java    |  6 ++
 .../server/uri/UriGrantsManagerService.java   |  6 +-
 .../com/android/server/wm/DisplayPolicy.java  |  4 +-
 .../server/wm/WindowManagerService.java       |  5 ++
 13 files changed, 183 insertions(+), 11 deletions(-)
 create mode 100644 core/java/com/android/internal/custom/screenshot/StitchImageUtility.java

diff --git a/core/java/android/view/IWindowManager.aidl b/core/java/android/view/IWindowManager.aidl
index f30c87fafa0..a70b129740f 100644
--- a/core/java/android/view/IWindowManager.aidl
+++ b/core/java/android/view/IWindowManager.aidl
@@ -767,4 +767,10 @@ interface IWindowManager
      * Notifies DisplayPolicy that overlays changed.
      */
     void onOverlayChanged();
+
+    /**
+     * Long screenshot
+     * @hide
+     */
+    void takeAlternativeScreenshot();
 }
diff --git a/core/java/com/android/internal/custom/screenshot/StitchImageUtility.java b/core/java/com/android/internal/custom/screenshot/StitchImageUtility.java
new file mode 100644
index 00000000000..247e33dce7d
--- /dev/null
+++ b/core/java/com/android/internal/custom/screenshot/StitchImageUtility.java
@@ -0,0 +1,90 @@
+/*
+ * Copyright (C) 2019 PixelExperience
+ *
+ * This program is free software; you can redistribute it and/or modify it under the terms of the
+ * GNU General Public License as published by the Free Software Foundation; either version 3 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
+ * the GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with this program;
+ * if not, see <http://www.gnu.org/licenses>.
+ */
+
+package com.android.internal.custom.screenshot;
+
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.media.MediaActionSound;
+import android.net.Uri;
+import android.os.UserHandle;
+import android.provider.Settings;
+import android.util.Log;
+
+import java.util.List;
+
+public class StitchImageUtility {
+    public static final String STITCHIMAGE_APP_PACKAGE_NAME = "com.asus.stitchimage";
+    public static final String STITCHIMAGE_FILEPROVIDER_CLASS = "com.asus.stitchimage.fileprovider";
+    private static final String STITCHIMAGE_OVERLAY_SERVICE_CLASS = "com.asus.stitchimage.OverlayService";
+    private static final String STITCHIMAGE_SERVICE_PACKAGE_NAME = "com.asus.stitchimage.service";
+    private static final String EXTRA_KEY_STITCHIMAGE_SETTINGS_CALLFROM = "callfrom";
+    private static final String EXTRA_VALUE_STITCHIMAGE_SETTINGS_CALLFROM_ASUSSETTINGS = "AsusSettings";
+    private static String TAG = "StitchImageUtility";
+    private final Context mContext;
+    private MediaActionSound mCameraSound;
+    private PackageManager mPackageManager;
+
+    public StitchImageUtility(Context context) {
+        mContext = context;
+        mPackageManager = mContext.getPackageManager();
+    }
+
+    public boolean takeScreenShot(String focusedPackageName) {
+        if (isPackageAllowed(focusedPackageName)) {
+            try {
+                Log.i(TAG, "Take long screenshot.");
+                Intent intent = new Intent();
+                intent.setComponent(new ComponentName(STITCHIMAGE_APP_PACKAGE_NAME, STITCHIMAGE_OVERLAY_SERVICE_CLASS));
+                intent.putExtra(EXTRA_KEY_STITCHIMAGE_SETTINGS_CALLFROM, EXTRA_VALUE_STITCHIMAGE_SETTINGS_CALLFROM_ASUSSETTINGS);
+                mContext.startService(intent);
+                playScreenshotSound();
+                return true;
+            } catch (Exception e) {
+                Log.e(TAG, "trigger stitchimage failed, Exception :" + e);
+            }
+        }
+        return false;
+    }
+
+    private void playScreenshotSound(){
+        if (mCameraSound == null){
+            mCameraSound = new MediaActionSound();
+            mCameraSound.load(MediaActionSound.SHUTTER_CLICK);
+        }
+    }
+
+    private boolean isPackageAllowed(String focusedPackageName){
+        if (focusedPackageName == null || focusedPackageName.equals("")
+                || focusedPackageName.equals("com.android.settings")){
+            return true;
+        }
+        if (focusedPackageName.equals("com.android.systemui")){
+            return false;
+        }
+        Intent i = new Intent(Intent.ACTION_MAIN);
+        i.addCategory(Intent.CATEGORY_HOME);
+        List<ResolveInfo> homePackages = mPackageManager.queryIntentActivities(i, 0);
+        for (ResolveInfo resolveInfo : homePackages) {
+            if (focusedPackageName.equals(resolveInfo.activityInfo.packageName)){
+                return false;
+            }
+        }
+        return true;
+    }
+}
diff --git a/core/java/com/android/internal/util/ScreenshotHelper.java b/core/java/com/android/internal/util/ScreenshotHelper.java
index b79c25a3927..b7f93ed6ce2 100644
--- a/core/java/com/android/internal/util/ScreenshotHelper.java
+++ b/core/java/com/android/internal/util/ScreenshotHelper.java
@@ -27,6 +27,8 @@ import android.os.UserHandle;
 import android.util.Log;
 import android.view.WindowManager;
 
+import com.android.internal.custom.screenshot.StitchImageUtility;
+
 import java.util.function.Consumer;
 
 public class ScreenshotHelper {
@@ -164,6 +166,7 @@ public class ScreenshotHelper {
     private IBinder mScreenshotService = null;
     private ServiceConnection mScreenshotConnection = null;
     private final Context mContext;
+    private final StitchImageUtility mStitchImageUtility;
 
     private final BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {
         @Override
@@ -180,6 +183,7 @@ public class ScreenshotHelper {
         mContext = context;
         IntentFilter filter = new IntentFilter(ACTION_USER_SWITCHED);
         mContext.registerReceiver(mBroadcastReceiver, filter);
+        mStitchImageUtility = new StitchImageUtility(mContext);
     }
 
     /**
@@ -208,7 +212,37 @@ public class ScreenshotHelper {
             @Nullable Consumer<Uri> completionConsumer) {
         ScreenshotRequest screenshotRequest = new ScreenshotRequest(source, hasStatus, hasNav);
         takeScreenshot(screenshotType, SCREENSHOT_TIMEOUT_MS, handler, screenshotRequest,
-                completionConsumer);
+                completionConsumer, null);
+    }
+
+    /**
+     * Request a screenshot be taken.
+     *
+     * Added to support reducing unit test duration; the method variant without a timeout argument
+     * is recommended for general use.
+     *
+     * @param screenshotType     The type of screenshot, for example either
+     *                           {@link android.view.WindowManager.TAKE_SCREENSHOT_FULLSCREEN}
+     *                           or
+     *                           {@link android.view.WindowManager.TAKE_SCREENSHOT_SELECTED_REGION}
+     * @param hasStatus          {@code true} if the status bar is currently showing. {@code false}
+     *                           if
+     *                           not.
+     * @param hasNav             {@code true} if the navigation bar is currently showing. {@code
+     *                           false}
+     *                           if not.
+     * @param handler            A handler used in case the screenshot times out
+     * @param completionConsumer Consumes `null` if a screenshot was not taken, and the URI of the
+     *                           screenshot if the screenshot was taken.
+     * @param focusedPackageName The focused package name
+     */
+    public void takeScreenshot(final int screenshotType, final boolean hasStatus,
+            final boolean hasNav, int source, @NonNull Handler handler,
+            @Nullable Consumer<Uri> completionConsumer,
+            final String focusedPackageName) {
+        ScreenshotRequest screenshotRequest = new ScreenshotRequest(source, hasStatus, hasNav);
+        takeScreenshot(screenshotType, SCREENSHOT_TIMEOUT_MS, handler, screenshotRequest,
+                completionConsumer, focusedPackageName);
     }
 
     /**
@@ -232,7 +266,7 @@ public class ScreenshotHelper {
             final boolean hasNav, @NonNull Handler handler,
             @Nullable Consumer<Uri> completionConsumer) {
         takeScreenshot(screenshotType, hasStatus, hasNav, SCREENSHOT_TIMEOUT_MS, handler,
-                completionConsumer);
+                completionConsumer, null);
     }
 
     /**
@@ -263,7 +297,7 @@ public class ScreenshotHelper {
             @Nullable Consumer<Uri> completionConsumer) {
         ScreenshotRequest screenshotRequest = new ScreenshotRequest(SCREENSHOT_OTHER, hasStatus,
                 hasNav);
-        takeScreenshot(screenshotType, timeoutMs, handler, screenshotRequest, completionConsumer);
+        takeScreenshot(screenshotType, timeoutMs, handler, screenshotRequest, completionConsumer, null);
     }
 
     /**
@@ -286,13 +320,17 @@ public class ScreenshotHelper {
                 new ScreenshotRequest(source, screenshotBundle, boundsInScreen, insets, taskId,
                         userId, topComponent);
         takeScreenshot(WindowManager.TAKE_SCREENSHOT_PROVIDED_IMAGE, SCREENSHOT_TIMEOUT_MS,
-                handler, screenshotRequest, completionConsumer);
+                handler, screenshotRequest, completionConsumer, null);
     }
 
     private void takeScreenshot(final int screenshotType, long timeoutMs, @NonNull Handler handler,
-            ScreenshotRequest screenshotRequest, @Nullable Consumer<Uri> completionConsumer) {
+            ScreenshotRequest screenshotRequest, @Nullable Consumer<Uri> completionConsumer,
+            final String focusedPackageName) {
         synchronized (mScreenshotLock) {
-
+            if (screenshotType == WindowManager.TAKE_SCREENSHOT_FULLSCREEN &&
+                    mStitchImageUtility.takeScreenShot(focusedPackageName)){
+                return;
+            }
             final Runnable mScreenshotTimeout = () -> {
                 synchronized (mScreenshotLock) {
                     if (mScreenshotConnection != null) {
diff --git a/packages/SystemUI/AndroidManifest.xml b/packages/SystemUI/AndroidManifest.xml
index 6bee19745c8..d77e46c0c35 100644
--- a/packages/SystemUI/AndroidManifest.xml
+++ b/packages/SystemUI/AndroidManifest.xml
@@ -276,6 +276,9 @@
     <protected-broadcast android:name="com.android.settingslib.action.UNREGISTER_SLICE_RECEIVER" />
     <protected-broadcast android:name="com.android.settings.flashlight.action.FLASHLIGHT_CHANGED" />
 
+    <!-- Asus Long screenshot -->
+    <uses-permission android:name="com.asus.stitchimage.permission.EXPORTED_FOR_ASUS_APPS"/>
+
     <application
         android:name=".SystemUIApplication"
         android:persistent="true"
diff --git a/packages/SystemUI/res/values/config.xml b/packages/SystemUI/res/values/config.xml
index 367fe72d4da..7aacd867a98 100644
--- a/packages/SystemUI/res/values/config.xml
+++ b/packages/SystemUI/res/values/config.xml
@@ -585,4 +585,7 @@
     <bool name="config_showNotificationForUnknownBatteryState">false</bool>
     <!-- content URL in a notification when ACTION_BATTERY_CHANGED.EXTRA_PRESENT field is false -->
     <string translatable="false" name="config_batteryStateUnknownUrl"></string>
+
+    <!-- Asus stitch editor component name -->
+    <string name="config_stitchEditor">com.asus.stitchimage/com.asus.stitchimage.editor.ScreenshotEditorActivity</string>
 </resources>
diff --git a/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java b/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java
index 0851858ed31..76b2552cb38 100644
--- a/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java
+++ b/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java
@@ -97,6 +97,7 @@ import android.view.ViewGroup;
 import android.view.Window;
 import android.view.WindowInsets;
 import android.view.WindowManager;
+import android.view.WindowManagerGlobal;
 import android.view.accessibility.AccessibilityEvent;
 import android.widget.BaseAdapter;
 import android.widget.FrameLayout;
@@ -1171,8 +1172,11 @@ public class GlobalActionsDialog implements DialogInterface.OnDismissListener,
             mHandler.postDelayed(new Runnable() {
                 @Override
                 public void run() {
-                    mScreenshotHelper.takeScreenshot(TAKE_SCREENSHOT_FULLSCREEN, true, true,
-                            SCREENSHOT_GLOBAL_ACTIONS, mHandler, null);
+                    try {
+                        WindowManagerGlobal.getWindowManagerService().takeAlternativeScreenshot();
+                    } catch (RemoteException e) {
+                        Log.e("GlobalActionsDialog", "Error while trying to takeAlternativeScreenshot.", e);
+                    }
                     mMetricsLogger.action(MetricsEvent.ACTION_SCREENSHOT_POWER_MENU);
                     mUiEventLogger.log(GlobalActionsEvent.GA_SCREENSHOT_PRESS);
                 }
diff --git a/packages/SystemUI/src/com/android/systemui/screenshot/SaveImageInBackgroundTask.java b/packages/SystemUI/src/com/android/systemui/screenshot/SaveImageInBackgroundTask.java
index be396b26135..80ae9701111 100644
--- a/packages/SystemUI/src/com/android/systemui/screenshot/SaveImageInBackgroundTask.java
+++ b/packages/SystemUI/src/com/android/systemui/screenshot/SaveImageInBackgroundTask.java
@@ -327,7 +327,7 @@ class SaveImageInBackgroundTask extends AsyncTask<Void, Void, Void> {
 
         // Create an edit intent, if a specific package is provided as the editor, then
         // launch that directly
-        String editorPackage = context.getString(R.string.config_screenshotEditor);
+        String editorPackage = context.getString(R.string.config_stitchEditor);
         Intent editIntent = new Intent(Intent.ACTION_EDIT);
         if (!TextUtils.isEmpty(editorPackage)) {
             editIntent.setComponent(ComponentName.unflattenFromString(editorPackage));
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/CastControllerImpl.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/CastControllerImpl.java
index da1ef2f0f65..ac8655b5ee4 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/CastControllerImpl.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/CastControllerImpl.java
@@ -48,6 +48,8 @@ import javax.inject.Inject;
 import javax.inject.Singleton;
 
 
+import com.android.internal.custom.screenshot.StitchImageUtility;
+
 /** Platform implementation of the cast controller. **/
 @Singleton
 public class CastControllerImpl implements CastController {
@@ -177,6 +179,10 @@ public class CastControllerImpl implements CastController {
         }
 
         synchronized (mProjectionLock) {
+            if (mProjection != null &&  mProjection.getPackageName().equals(
+                    StitchImageUtility.STITCHIMAGE_APP_PACKAGE_NAME)) {
+                mProjection = null;
+            }
             if (mProjection != null) {
                 final CastDevice device = new CastDevice();
                 device.id = mProjection.getPackageName();
diff --git a/services/core/java/com/android/server/policy/PhoneWindowManager.java b/services/core/java/com/android/server/policy/PhoneWindowManager.java
index a6f242f24f8..e478ef2a204 100644
--- a/services/core/java/com/android/server/policy/PhoneWindowManager.java
+++ b/services/core/java/com/android/server/policy/PhoneWindowManager.java
@@ -6549,4 +6549,9 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         }
     }
 
+    @Override
+    public void takeAlternativeScreenshot() {
+        mScreenshotRunnable.setScreenshotType(TAKE_SCREENSHOT_FULLSCREEN);
+        mHandler.post(mScreenshotRunnable);
+    }
 }
diff --git a/services/core/java/com/android/server/policy/WindowManagerPolicy.java b/services/core/java/com/android/server/policy/WindowManagerPolicy.java
index cadbe51c804..d9b1c687f18 100644
--- a/services/core/java/com/android/server/policy/WindowManagerPolicy.java
+++ b/services/core/java/com/android/server/policy/WindowManagerPolicy.java
@@ -1469,4 +1469,10 @@ public interface WindowManagerPolicy extends WindowManagerPolicyConstants {
      * @return whether the value was changed.
      */
     boolean setAodShowing(boolean aodShowing);
+
+    /**
+     * Long screenshot
+     * @hide
+     */
+    void takeAlternativeScreenshot();
 }
diff --git a/services/core/java/com/android/server/uri/UriGrantsManagerService.java b/services/core/java/com/android/server/uri/UriGrantsManagerService.java
index e8a0379473d..2a25c4320bf 100644
--- a/services/core/java/com/android/server/uri/UriGrantsManagerService.java
+++ b/services/core/java/com/android/server/uri/UriGrantsManagerService.java
@@ -113,6 +113,8 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
 
+import com.android.internal.custom.screenshot.StitchImageUtility;
+
 /** Manages uri grants. */
 public class UriGrantsManagerService extends IUriGrantsManager.Stub {
     private static final boolean DEBUG = false;
@@ -1126,12 +1128,14 @@ public class UriGrantsManagerService extends IUriGrantsManager.Stub {
         final int callingAppId = UserHandle.getAppId(callingUid);
         if ((callingAppId == SYSTEM_UID) || (callingAppId == ROOT_UID)) {
             if ("com.android.settings.files".equals(grantUri.uri.getAuthority())
-                    || "com.android.settings.module_licenses".equals(grantUri.uri.getAuthority())) {
+                    || "com.android.settings.module_licenses".equals(grantUri.uri.getAuthority())
+                    || StitchImageUtility.STITCHIMAGE_FILEPROVIDER_CLASS.equals(grantUri.uri.getAuthority())) {
                 // Exempted authority for
                 // 1. cropping user photos and sharing a generated license html
                 //    file in Settings app
                 // 2. sharing a generated license html file in TvSettings app
                 // 3. Sharing module license files from Settings app
+                // 4. Asus Long Screenshot app
             } else {
                 Slog.w(TAG, "For security reasons, the system cannot issue a Uri permission"
                         + " grant to " + grantUri + "; use startActivityAsCaller() instead");
diff --git a/services/core/java/com/android/server/wm/DisplayPolicy.java b/services/core/java/com/android/server/wm/DisplayPolicy.java
index 97e4a9595da..0c6afbdc413 100644
--- a/services/core/java/com/android/server/wm/DisplayPolicy.java
+++ b/services/core/java/com/android/server/wm/DisplayPolicy.java
@@ -4124,10 +4124,12 @@ public class DisplayPolicy {
      */
     public void takeScreenshot(int screenshotType, int source) {
         if (mScreenshotHelper != null) {
+            String packageName = mFocusedWindow == null ? "" : mFocusedWindow.getAttrs().packageName;
             mScreenshotHelper.takeScreenshot(screenshotType,
                     getStatusBar() != null && getStatusBar().isVisibleLw(),
                     getNavigationBar() != null && getNavigationBar().isVisibleLw(),
-                    source, mHandler, null /* completionConsumer */);
+                    source, mHandler, null, /* completionConsumer */
+                    packageName);
         }
     }
 
diff --git a/services/core/java/com/android/server/wm/WindowManagerService.java b/services/core/java/com/android/server/wm/WindowManagerService.java
index 355a531496f..d9f20d0288a 100644
--- a/services/core/java/com/android/server/wm/WindowManagerService.java
+++ b/services/core/java/com/android/server/wm/WindowManagerService.java
@@ -8284,4 +8284,9 @@ public class WindowManagerService extends IWindowManager.Stub
             Binder.restoreCallingIdentity(origId);
         }
     }
+
+    @Override
+    public void takeAlternativeScreenshot() {
+        mPolicy.takeAlternativeScreenshot();
+    }
 }
-- 
2.31.1


From e9ae9d6e888899ae385d5ebe8343ead4d17bb33f Mon Sep 17 00:00:00 2001
From: Cosmin Tanislav <demonsingur@gmail.com>
Date: Sun, 16 Aug 2020 19:45:00 +0200
Subject: [PATCH 46/63] base: Allow unlocking fingerprint only on power button
 press

Change-Id: I2f569a8ab4d1dd2c118cfb2d1c1072ce6b4e3584
Signed-off-by: Adithya R <gh0strider.2k18.reborn@gmail.com>
Signed-off-by: SamarV-121 <samarvispute121@gmail.com>
---
 core/res/res/values/lineage_config.xml        |   3 +
 core/res/res/values/lineage_symbols.xml       |   3 +
 .../biometrics/BiometricServiceBase.java      | 106 +++++++++++++++++-
 .../com/android/server/biometrics/Utils.java  |   5 +
 .../fingerprint/FingerprintService.java       |  60 ++++++++++
 .../server/policy/PhoneWindowManager.java     |  32 ++++++
 .../server/policy/WindowManagerPolicy.java    |   7 ++
 7 files changed, 213 insertions(+), 3 deletions(-)

diff --git a/core/res/res/values/lineage_config.xml b/core/res/res/values/lineage_config.xml
index b92cd059433..e8513573cfa 100644
--- a/core/res/res/values/lineage_config.xml
+++ b/core/res/res/values/lineage_config.xml
@@ -37,4 +37,7 @@
 
     <!-- Enable face auth only when swiping security view -->
     <bool name="config_faceAuthOnlyOnSecurityView">false</bool>
+
+    <!-- Whether device has fingerprint on power button -->
+    <bool name="config_powerButtonFingerprint">false</bool>
 </resources>
diff --git a/core/res/res/values/lineage_symbols.xml b/core/res/res/values/lineage_symbols.xml
index b135079cec0..191e673d0f8 100644
--- a/core/res/res/values/lineage_symbols.xml
+++ b/core/res/res/values/lineage_symbols.xml
@@ -28,4 +28,7 @@
 
     <!-- Enable face auth only when swiping security view -->
     <java-symbol type="bool" name="config_faceAuthOnlyOnSecurityView" />
+
+    <!-- Power button fingerprint -->
+    <java-symbol type="bool" name="config_powerButtonFingerprint" />
 </resources>
diff --git a/services/core/java/com/android/server/biometrics/BiometricServiceBase.java b/services/core/java/com/android/server/biometrics/BiometricServiceBase.java
index 1da151c9db4..df1ab8e3f33 100644
--- a/services/core/java/com/android/server/biometrics/BiometricServiceBase.java
+++ b/services/core/java/com/android/server/biometrics/BiometricServiceBase.java
@@ -23,6 +23,7 @@ import android.app.ActivityManager;
 import android.app.ActivityTaskManager;
 import android.app.AppOpsManager;
 import android.app.IActivityTaskManager;
+import android.app.KeyguardManager;
 import android.app.SynchronousUserSwitchObserver;
 import android.app.TaskStackListener;
 import android.content.ComponentName;
@@ -45,6 +46,7 @@ import android.os.IBinder;
 import android.os.IHwBinder;
 import android.os.IRemoteCallback;
 import android.os.Looper;
+import android.os.Message;
 import android.os.PowerManager;
 import android.os.Process;
 import android.os.RemoteException;
@@ -59,7 +61,10 @@ import com.android.internal.annotations.VisibleForTesting;
 import com.android.internal.logging.MetricsLogger;
 import com.android.internal.statusbar.IStatusBarService;
 import com.android.internal.util.FrameworkStatsLog;
+import com.android.server.biometrics.Utils;
+import com.android.server.policy.WindowManagerPolicy;
 import com.android.server.SystemService;
+import com.android.server.LocalServices;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -80,12 +85,15 @@ public abstract class BiometricServiceBase extends SystemService
 
     private static final String KEY_LOCKOUT_RESET_USER = "lockout_reset_user";
     private static final int MSG_USER_SWITCHING = 10;
+    private static final int MSG_POWER_BUTTON_INTERCEPT = 11;
     private static final long CANCEL_TIMEOUT_LIMIT = 3000; // max wait for onCancel() from HAL,in ms
 
-    private final Context mContext;
+    protected final Context mContext;
     private final String mKeyguardPackage;
+    protected ListenPowerKey mListenPowerKey = new ListenPowerKey();
     private final IActivityTaskManager mActivityTaskManager;
     private final PowerManager mPowerManager;
+    private final KeyguardManager mKeyguardManager;
     private final UserManager mUserManager;
     private final MetricsLogger mMetricsLogger;
     private final boolean mCleanupUnusedFingerprints;
@@ -109,6 +117,10 @@ public abstract class BiometricServiceBase extends SystemService
                 case MSG_USER_SWITCHING:
                     handleUserSwitching(msg.arg1);
                     break;
+                case 11:
+                    if (Utils.hasPowerButtonFingerprint(mContext))
+                        handlePowerKeyDown(msg.arg1);
+                    break;
                 default:
                     Slog.w(getTag(), "Unknown message:" + msg.what);
             }
@@ -123,6 +135,7 @@ public abstract class BiometricServiceBase extends SystemService
     private ClientMonitor mPendingClient;
     private PerformanceStats mPerformanceStats;
     protected int mCurrentUserId = UserHandle.USER_NULL;
+    private final FingerprintStateListener mFingerprintStateListener = new FingerprintStateListener();
     protected long mHalDeviceId;
     private int mOEMStrength; // Tracks the OEM configured biometric modality strength
     // Tracks if the current authentication makes use of CryptoObjects.
@@ -132,6 +145,7 @@ public abstract class BiometricServiceBase extends SystemService
     // Transactions that make use of CryptoObjects are tracked by mCryptoPerformaceMap.
     protected HashMap<Integer, PerformanceStats> mCryptoPerformanceMap = new HashMap<>();
     protected int mHALDeathCount;
+    private WindowManagerPolicy mWindowManagerPolicy;
 
     protected class PerformanceStats {
         public int accept; // number of accepted biometrics
@@ -661,6 +675,7 @@ public abstract class BiometricServiceBase extends SystemService
         mActivityTaskManager = ((ActivityTaskManager) context.getSystemService(
                 Context.ACTIVITY_TASK_SERVICE)).getService();
         mPowerManager = mContext.getSystemService(PowerManager.class);
+        mKeyguardManager = mContext.getSystemService(KeyguardManager.class);
         mUserManager = UserManager.get(mContext);
         mMetricsLogger = new MetricsLogger();
         mCleanupUnusedFingerprints = statsModality() == BiometricsProtoEnums.MODALITY_FINGERPRINT &&
@@ -675,6 +690,9 @@ public abstract class BiometricServiceBase extends SystemService
     @Override
     public void onStart() {
         listenForUserSwitches();
+        if (Utils.hasPowerButtonFingerprint(mContext)) {
+            registerForWindowManger();
+        }
     }
 
     @Override
@@ -736,6 +754,12 @@ public abstract class BiometricServiceBase extends SystemService
             BiometricAuthenticator.Identifier identifier, ArrayList<Byte> token) {
         ClientMonitor client = mCurrentClient;
 
+        if (client != null && isKeyguard(mCurrentClient.getOwnerString())
+                && mWindowManagerPolicy != null && authenticated && Utils.hasPowerButtonFingerprint(mContext)) {
+            long now = SystemClock.uptimeMillis();
+            mWindowManagerPolicy.interceptPowerKeyByFinger(now);
+        }
+
         if (client != null && client.onAuthenticated(identifier, authenticated, token)) {
             removeClient(client);
         }
@@ -1142,6 +1166,13 @@ public abstract class BiometricServiceBase extends SystemService
             return;
         }
 
+        if (!isKeyguard(mCurrentClient.getOwnerString())
+                && (this.mCurrentClient.getClass().getSuperclass().getSimpleName().equals("AuthenticationClientImpl")
+                    || this.mCurrentClient.getClass().getSuperclass().getSimpleName().equals("EnrollClientImpl"))
+                    && Utils.hasPowerButtonFingerprint(mContext)) {
+            notifyInterceptPowerKey(true);
+        }
+
         int status = mCurrentClient.start();
         if (status == 0) {
             notifyClientActiveCallbacks(true);
@@ -1153,6 +1184,9 @@ public abstract class BiometricServiceBase extends SystemService
     }
 
     protected void removeClient(ClientMonitor client) {
+        if (Utils.hasPowerButtonFingerprint(mContext))
+            notifyInterceptPowerKey(false);
+
         if (client != null) {
             client.destroy();
             if (client != mCurrentClient && mCurrentClient != null) {
@@ -1321,6 +1355,10 @@ public abstract class BiometricServiceBase extends SystemService
         }
     }
 
+    protected void handlePowerKeyDown(int isPowerKeyDown) {
+        mListenPowerKey.setPowerKeyDown(isPowerKeyDown);
+    }
+
     private void userActivity() {
         long now = SystemClock.uptimeMillis();
         mPowerManager.userActivity(now, PowerManager.USER_ACTIVITY_EVENT_TOUCH, 0);
@@ -1341,7 +1379,6 @@ public abstract class BiometricServiceBase extends SystemService
         return userInfo != null && userInfo.isManagedProfile();
     }
 
-
     private int getEffectiveUserId(int userId) {
         UserManager um = UserManager.get(mContext);
         if (um != null) {
@@ -1354,7 +1391,6 @@ public abstract class BiometricServiceBase extends SystemService
         return userId;
     }
 
-
     private void listenForUserSwitches() {
         try {
             ActivityManager.getService().registerUserSwitchObserver(
@@ -1370,8 +1406,72 @@ public abstract class BiometricServiceBase extends SystemService
         }
     }
 
+    private void registerForWindowManger() {
+        mWindowManagerPolicy = LocalServices.getService(WindowManagerPolicy.class);
+        mWindowManagerPolicy.registerFingerListener(mFingerprintStateListener);
+    }
+
+    private void notifyInterceptPowerKey(boolean start) {
+        if (mWindowManagerPolicy != null) {
+            mWindowManagerPolicy.notifySideFpAuthenOrEnroll(start);
+        }
+    }
+
     private void removeLockoutResetCallback(
             LockoutResetMonitor monitor) {
         mLockoutMonitors.remove(monitor);
     }
+
+    protected boolean isScreenOn() {
+        return mPowerManager.isInteractive();
+    }
+
+    protected boolean isKeyguardLocked() {
+       return mKeyguardManager.isKeyguardLocked();
+    }
+
+    public static class ListenPowerKey {
+        private boolean dealOnChange = false;
+        private ChangeListener listener;
+        private int mIsPowerKeyDown;
+
+        public interface ChangeListener {
+            void onChange(boolean z);
+        }
+
+        public ChangeListener getListener() {
+            return listener;
+        }
+
+        public void setPowerKeyDown(int isPowerKeyDown) {
+            mIsPowerKeyDown = isPowerKeyDown;
+            if (listener != null) {
+                listener.onChange(this.dealOnChange);
+            }
+        }
+
+        public int getPowerKeyDown() {
+            return mIsPowerKeyDown;
+        }
+
+        public void setDealOnChange(boolean value) {
+            dealOnChange = value;
+        }
+
+        public boolean getDealOnChange() {
+            return dealOnChange;
+        }
+
+        public void setListener(ChangeListener newListener) {
+            listener = newListener;
+        }
+    }
+
+    private final class FingerprintStateListener implements WindowManagerPolicy.FingerListener {
+        public void powerDown(boolean isPowerKeyDown) {
+            Message msg = mHandler.obtainMessage(MSG_POWER_BUTTON_INTERCEPT);
+            msg.arg1 = isPowerKeyDown ? 1 : 0;
+            msg.sendToTarget();
+        }
+    }
 }
diff --git a/services/core/java/com/android/server/biometrics/Utils.java b/services/core/java/com/android/server/biometrics/Utils.java
index 1a81c26d8ea..2c281ef927e 100644
--- a/services/core/java/com/android/server/biometrics/Utils.java
+++ b/services/core/java/com/android/server/biometrics/Utils.java
@@ -334,4 +334,9 @@ public class Utils {
         }
         return sensors.toArray(new String[0]);
     }
+
+    // Check to see if device has power button fingerprint
+    public static boolean hasPowerButtonFingerprint(Context context) {
+        return context.getResources().getBoolean(com.android.internal.R.bool.config_powerButtonFingerprint);
+    }
 }
diff --git a/services/core/java/com/android/server/biometrics/fingerprint/FingerprintService.java b/services/core/java/com/android/server/biometrics/fingerprint/FingerprintService.java
index 5b51aa6e72a..b303026f3a2 100644
--- a/services/core/java/com/android/server/biometrics/fingerprint/FingerprintService.java
+++ b/services/core/java/com/android/server/biometrics/fingerprint/FingerprintService.java
@@ -115,6 +115,12 @@ public class FingerprintService extends BiometricServiceBase {
     private final boolean mHasFod;
     private boolean mIsKeyguard;
 
+    public boolean isScreenOnWhenFingerdown = false;
+    public long mOpId;
+    public String mOpPackage;
+    BiometricAuthenticator.Identifier identifier;
+    ArrayList<Byte> token;
+
     private final class ResetFailedAttemptsForUserRunnable implements Runnable {
         @Override
         public void run() {
@@ -273,6 +279,8 @@ public class FingerprintService extends BiometricServiceBase {
                 Binder.restoreCallingIdentity(identity);
             }
 
+            if (Utils.hasPowerButtonFingerprint(mContext))
+                saveAuthenticateConfig(opId, opPackageName);
             updateActiveGroup(userId, opPackageName);
             final boolean restricted = isRestricted();
             final AuthenticationClientImpl client = new FingerprintAuthClient(getContext(),
@@ -709,6 +717,34 @@ public class FingerprintService extends BiometricServiceBase {
                 }
                 FingerprintService.super.handleAcquired(deviceId, acquiredInfo, vendorCode);
             });
+            if (Utils.hasPowerButtonFingerprint(mContext)) {
+                if (acquiredInfo == 6 && vendorCode == 22) {
+                    isScreenOnWhenFingerdown = isScreenOn();
+                }
+
+                if (acquiredInfo == 6 && vendorCode == 23) {
+                    mListenPowerKey.setDealOnChange(false);
+
+                    if (mListenPowerKey.getPowerKeyDown() == 0 && !isScreenOnWhenFingerdown && mOpPackage != null) {
+                        if (isKeyguard(mOpPackage) && isKeyguardLocked()) {
+                            try {
+                                int result = getDaemonWrapper().authenticate(mOpId, mCurrentUserId);
+                                if (result != 0) {
+                                    onError(getHalDeviceId(), 1, 0);
+                                }
+                            } catch (RemoteException e) {
+                                Slog.e(getTag(), "startAuthentication failed", e);
+                            }
+                        }
+                    }
+                }
+            }
+        }
+
+        public void saveAuthenResultLocal(BiometricAuthenticator.Identifier newIdentifier, ArrayList<Byte> newToken) {
+            identifier = newIdentifier;
+            token = newToken;
+            mListenPowerKey.setDealOnChange(true);
         }
 
         @Override
@@ -725,6 +761,10 @@ public class FingerprintService extends BiometricServiceBase {
                 }
 
                 final Fingerprint fp = new Fingerprint("", groupId, fingerId, deviceId);
+                if (!isScreenOnWhenFingerdown && mListenPowerKey.getPowerKeyDown() == 0 && Utils.hasPowerButtonFingerprint(mContext)) {
+                    saveAuthenResultLocal(fp, token);
+                    return;
+                }
                 FingerprintService.super.handleAuthenticated(authenticated, fp, token);
                 if (mHasFod && fp.getBiometricId() != 0) {
                     try {
@@ -896,6 +936,21 @@ public class FingerprintService extends BiometricServiceBase {
 
         PackageManager packageManager = context.getPackageManager();
         mHasFod = packageManager.hasSystemFeature(LineageContextConstants.Features.FOD);
+
+        if (Utils.hasPowerButtonFingerprint(context)) {
+            mListenPowerKey.setListener(new BiometricServiceBase.ListenPowerKey.ChangeListener() {
+                public void onChange(boolean value) {
+                    if (mListenPowerKey.getDealOnChange()) {
+                        if (mListenPowerKey.getPowerKeyDown() == 1 && identifier != null && token != null) {
+                            mHandler.post(() -> {
+                                FingerprintService.super.handleAuthenticated(value, identifier, token);
+                            });
+                        }
+                        mListenPowerKey.setDealOnChange(false);
+                    }
+                }
+            });
+        }
     }
 
     @Override
@@ -1200,6 +1255,11 @@ public class FingerprintService extends BiometricServiceBase {
                 PendingIntent.FLAG_UPDATE_CURRENT);
     }
 
+    public void saveAuthenticateConfig(long opId, String opPackageName) {
+        this.mOpId = opId;
+        this.mOpPackage = opPackageName;
+    }
+
     private void dumpInternal(PrintWriter pw) {
         JSONObject dump = new JSONObject();
         try {
diff --git a/services/core/java/com/android/server/policy/PhoneWindowManager.java b/services/core/java/com/android/server/policy/PhoneWindowManager.java
index 516b1bf50f1..f9258f437ea 100644
--- a/services/core/java/com/android/server/policy/PhoneWindowManager.java
+++ b/services/core/java/com/android/server/policy/PhoneWindowManager.java
@@ -213,6 +213,7 @@ import com.android.server.ExtconUEventObserver;
 import com.android.server.GestureLauncherService;
 import com.android.server.LocalServices;
 import com.android.server.SystemServiceManager;
+import com.android.server.biometrics.Utils;
 import com.android.server.inputmethod.InputMethodManagerInternal;
 import com.android.server.policy.keyguard.KeyguardServiceDelegate;
 import com.android.server.policy.keyguard.KeyguardServiceDelegate.DrawnListener;
@@ -392,6 +393,9 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     final Object mServiceAquireLock = new Object();
     Vibrator mVibrator; // Vibrator for giving feedback of orientation changes
     SearchManager mSearchManager;
+    private boolean interceptPowerKeyAuthOrEnroll = false;
+    private long interceptPowerKeyTimeByFinger = -1;
+    private boolean isAuthenOrEnrollRunningWhenDown = false;
     AccessibilityManager mAccessibilityManager;
     BurnInProtectionHelper mBurnInProtectionHelper;
     private DisplayFoldController mDisplayFoldController;
@@ -665,6 +669,8 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     private final SparseArray<KeyCharacterMap.FallbackAction> mFallbackActions =
             new SparseArray<KeyCharacterMap.FallbackAction>();
 
+    private WindowManagerPolicy.FingerListener mFingerListener;
+
     private final LogDecelerateInterpolator mLogDecelerateInterpolator
             = new LogDecelerateInterpolator(100, 0);
 
@@ -1130,6 +1136,8 @@ public class PhoneWindowManager implements WindowManagerPolicy {
 
         schedulePossibleVeryLongPressReboot();
 
+        isAuthenOrEnrollRunningWhenDown = interceptPowerKeyAuthOrEnroll;
+
         // If the power key has still not yet been handled, then detect short
         // press, long press, or multi press and decide what to do.
         mPowerKeyHandled = hungUp || mScreenshotChordVolumeDownKeyTriggered
@@ -1317,6 +1325,9 @@ public class PhoneWindowManager implements WindowManagerPolicy {
      * @return True if the was device was sent to sleep, false if sleep was suppressed.
      */
     private boolean goToSleepFromPowerButton(long eventTime, int flags) {
+        if ((eventTime - interceptPowerKeyTimeByFinger < 700 || isAuthenOrEnrollRunningWhenDown) && Utils.hasPowerButtonFingerprint(mContext)) {
+            return false;
+        }
         // Before we actually go to sleep, we check the last wakeup reason.
         // If the device very recently woke up from a gesture (like user lifting their device)
         // then ignore the sleep instruction. This is because users have developed
@@ -3021,6 +3032,21 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             WindowManager.LayoutParams.TYPE_SYSTEM_ERROR,
         };
 
+    /**
+     * Fingerprint unlock on press
+     */
+    public void registerFingerListener(WindowManagerPolicy.FingerListener listener) {
+        mFingerListener = listener;
+    }
+
+    public void interceptPowerKeyByFinger(long time) {
+        interceptPowerKeyTimeByFinger = time;
+    }
+
+    public void notifySideFpAuthenOrEnroll(boolean start) {
+        interceptPowerKeyAuthOrEnroll = start;
+    }
+
     // TODO(b/117479243): handle it in InputPolicy
     /** {@inheritDoc} */
     @Override
@@ -4540,6 +4566,9 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             }
 
             case KeyEvent.KEYCODE_POWER: {
+                if (mFingerListener != null) {
+                    mFingerListener.powerDown(down);
+                }
                 EventLogTags.writeInterceptPower(
                         KeyEvent.actionToString(event.getAction()),
                         mPowerKeyHandled ? 1 : 0, mPowerKeyPressCounter);
@@ -5253,6 +5282,9 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     }
 
     private void wakeUpFromPowerKey(long eventTime) {
+        if ((eventTime - this.interceptPowerKeyTimeByFinger < 700) && Utils.hasPowerButtonFingerprint(mContext)) {
+            return;
+        }
         wakeUp(eventTime, mAllowTheaterModeWakeFromPowerKey,
                 PowerManager.WAKE_REASON_POWER_BUTTON, "android.policy:POWER");
     }
diff --git a/services/core/java/com/android/server/policy/WindowManagerPolicy.java b/services/core/java/com/android/server/policy/WindowManagerPolicy.java
index d9b1c687f18..2acb0b5dca7 100644
--- a/services/core/java/com/android/server/policy/WindowManagerPolicy.java
+++ b/services/core/java/com/android/server/policy/WindowManagerPolicy.java
@@ -1475,4 +1475,11 @@ public interface WindowManagerPolicy extends WindowManagerPolicyConstants {
      * @hide
      */
     void takeAlternativeScreenshot();
+
+    public interface FingerListener {
+        void powerDown(boolean z);
+    }
+    void registerFingerListener(FingerListener fingerListener);
+    void interceptPowerKeyByFinger(long time);
+    void notifySideFpAuthenOrEnroll(boolean start);
 }
-- 
2.31.1.606.gdf6c4f722c


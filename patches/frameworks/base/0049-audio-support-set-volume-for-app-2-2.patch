From 2efd48d739cf42f296e9e776e998b2aad0dbf7fc Mon Sep 17 00:00:00 2001
From: cjybyjk <cjybyjk@zjnu.edu.cn>
Date: Sat, 5 Sep 2020 08:44:29 +0800
Subject: [PATCH 49/63] audio: support set volume for app [2/2]

Signed-off-by: cjybyjk <cjybyjk@zjnu.edu.cn>
Change-Id: If7c467ba8c2332a1fc1efe8068fd4838dcca60f8
---
 core/jni/android_media_AudioSystem.cpp     | 115 ++++++++++++++++++++-
 media/java/android/media/AppTrackData.java |  53 ++++++++++
 media/java/android/media/AudioManager.java |  26 +++++
 media/java/android/media/AudioSystem.java  |  15 +++
 4 files changed, 208 insertions(+), 1 deletion(-)
 create mode 100644 media/java/android/media/AppTrackData.java

diff --git a/core/jni/android_media_AudioSystem.cpp b/core/jni/android_media_AudioSystem.cpp
index 22bb2102a6e..abcc0f7f7eb 100644
--- a/core/jni/android_media_AudioSystem.cpp
+++ b/core/jni/android_media_AudioSystem.cpp
@@ -29,6 +29,7 @@
 #include <audiomanager/AudioManager.h>
 #include <media/AudioPolicy.h>
 #include <media/AudioSystem.h>
+#include <media/AppTrackData.h>
 #include <media/MicrophoneInfo.h>
 #include <nativehelper/ScopedLocalRef.h>
 #include <system/audio.h>
@@ -172,6 +173,9 @@ static struct {
     jmethodID postRecordConfigEventFromNative;
 } gAudioPolicyEventHandlerMethods;
 
+static jclass gAppTrackDataClass;
+static jmethodID gAppTrackDataCstor;
+
 //
 // JNI Initialization for OpenSLES routing
 //
@@ -763,6 +767,104 @@ android_media_AudioSystem_getMasterBalance(JNIEnv *env, jobject thiz)
     return balance;
 }
 
+static jint
+android_media_AudioSystem_setAppVolume(JNIEnv *env, jobject thiz, jstring packageName, jfloat value)
+{
+    const jchar* c_packageName = env->GetStringCritical(packageName, 0);
+    String8 package8 = String8(reinterpret_cast<const char16_t*>(c_packageName), env->GetStringLength(packageName));
+    env->ReleaseStringCritical(packageName, c_packageName);
+    return (jint) check_AudioSystem_Command(AudioSystem::setAppVolume(package8, value));
+}
+
+static jint
+android_media_AudioSystem_setAppMute(JNIEnv *env, jobject thiz, jstring packageName, jboolean mute)
+{
+    const jchar* c_packageName = env->GetStringCritical(packageName, 0);
+    String8 package8 = String8(reinterpret_cast<const char16_t*>(c_packageName), env->GetStringLength(packageName));
+    env->ReleaseStringCritical(packageName, c_packageName);
+    return (jint) check_AudioSystem_Command(AudioSystem::setAppMute(package8, mute));
+}
+
+jint convertAppTrackDataFromNative(JNIEnv *env, jobject *jAppTrackData, const AppTrackData *AppTrackData)
+{
+    jint jStatus = (jint)AUDIO_JAVA_SUCCESS;
+    jstring jPackageName;
+    jfloat jVolume;
+    jboolean jMute;
+    jboolean jActive;
+
+    if (AppTrackData == NULL || jAppTrackData == NULL) {
+        jStatus = (jint)AUDIO_JAVA_ERROR;
+        goto exit;
+    }
+
+    jPackageName = env->NewStringUTF((*AppTrackData).packageName);
+    jVolume = (*AppTrackData).volume;
+    jMute = (*AppTrackData).muted;
+    jActive = (*AppTrackData).active;
+
+    *jAppTrackData = env->NewObject(gAppTrackDataClass, gAppTrackDataCstor,
+                                jPackageName, jMute, jVolume, jActive);
+                                
+    env->DeleteLocalRef(jPackageName);
+exit:
+    return jStatus;
+}
+
+static jint
+android_media_AudioSystem_listAppTrackDatas(JNIEnv *env, jobject clazz, jobject jVolumes)
+{
+    ALOGV("listAppTrackDatas");
+
+    if (jVolumes == NULL) {
+        ALOGE("listAppTrackDatas NULL AppTrackData ArrayList");
+        return (jint)AUDIO_JAVA_BAD_VALUE;
+    }
+    if (!env->IsInstanceOf(jVolumes, gArrayListClass)) {
+        ALOGE("listAppTrackDatas not an arraylist");
+        return (jint)AUDIO_JAVA_BAD_VALUE;
+    }
+
+    status_t status;
+    unsigned int numVolumes;
+    AppTrackData *nVolumes = NULL;
+    jint jStatus = (jint)AUDIO_JAVA_SUCCESS;
+
+    numVolumes = 0;
+    status = AudioSystem::listAppTrackDatas(&numVolumes, NULL);
+    if (status != NO_ERROR) {
+        ALOGE("AudioSystem::listAppTrackDatas error %d", status);
+        jStatus = nativeToJavaStatus(status);
+        goto exit;
+    }
+    if (numVolumes == 0) {
+        goto exit;
+    }
+    nVolumes = (AppTrackData *)realloc(nVolumes, numVolumes * sizeof(AppTrackData));
+
+    status = AudioSystem::listAppTrackDatas(&numVolumes, nVolumes);
+    jStatus = nativeToJavaStatus(status);
+    if (jStatus != AUDIO_JAVA_SUCCESS) {
+        goto exit;
+    }
+
+    for (size_t i = 0; i < numVolumes; i++) {
+        jobject jAppTrackData = NULL;
+        jStatus = convertAppTrackDataFromNative(env, &jAppTrackData, &nVolumes[i]);
+        if (jStatus != AUDIO_JAVA_SUCCESS) {
+            goto exit;
+        }
+        env->CallBooleanMethod(jVolumes, gArrayListMethods.add, jAppTrackData);
+        if (jAppTrackData != NULL) {
+            env->DeleteLocalRef(jAppTrackData);
+        }
+    }
+
+exit:
+    free(nVolumes);
+    return jStatus;
+}
+
 static jint
 android_media_AudioSystem_getDevicesForStream(JNIEnv *env, jobject thiz, jint stream)
 {
@@ -2561,7 +2663,13 @@ static const JNINativeMethod gMethods[] =
           (void *)android_media_AudioSystem_setUserIdDeviceAffinities},
          {"removeUserIdDeviceAffinities", "(I)I",
           (void *)android_media_AudioSystem_removeUserIdDeviceAffinities},
-         {"setCurrentImeUid", "(I)I", (void *)android_media_AudioSystem_setCurrentImeUid}};
+         {"setCurrentImeUid", "(I)I", (void *)android_media_AudioSystem_setCurrentImeUid},
+         {"setAppVolume", "(Ljava/lang/String;F)I",
+          (void *)android_media_AudioSystem_setAppVolume},
+         {"setAppMute", "(Ljava/lang/String;Z)I",
+          (void *)android_media_AudioSystem_setAppMute},
+         {"listAppTrackDatas", "(Ljava/util/ArrayList;)I",
+          (void *)android_media_AudioSystem_listAppTrackDatas}};
 
 static const JNINativeMethod gEventHandlerMethods[] = {
     {"native_setup",
@@ -2653,6 +2761,11 @@ int register_android_media_AudioSystem(JNIEnv *env)
     gAudioPortFields.mAddress = GetFieldIDOrDie(env, audioDevicePortClass, "mAddress",
             "Ljava/lang/String;");
 
+    jclass AppTrackDataClass = FindClassOrDie(env, "android/media/AppTrackData");
+    gAppTrackDataClass = MakeGlobalRefOrDie(env, AppTrackDataClass);
+    gAppTrackDataCstor = GetMethodIDOrDie(env, AppTrackDataClass, "<init>",
+            "(Ljava/lang/String;ZFZ)V");
+
     jclass audioMixPortClass = FindClassOrDie(env, "android/media/AudioMixPort");
     gAudioMixPortClass = MakeGlobalRefOrDie(env, audioMixPortClass);
     gAudioMixPortCstor = GetMethodIDOrDie(env, audioMixPortClass, "<init>",
diff --git a/media/java/android/media/AppTrackData.java b/media/java/android/media/AppTrackData.java
new file mode 100644
index 00000000000..18c9279b2f9
--- /dev/null
+++ b/media/java/android/media/AppTrackData.java
@@ -0,0 +1,53 @@
+/*
+ * Copyright (C) 2020 The exTHmUI Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package android.media;
+
+import android.annotation.NonNull;
+
+/**
+ * @hide
+ */
+public class AppTrackData {
+    private final String mPackageName;
+    private final float mVolume;
+    private final boolean mMute;
+    private final boolean mActive;
+
+    AppTrackData(String packageName, boolean mute, float volume, boolean active) {
+        mPackageName = packageName;
+        mMute = mute;
+        mVolume = volume;
+        mActive = active;
+    }
+
+    @NonNull
+    public String getPackageName() {
+        return mPackageName;
+    }
+
+    public float getVolume() {
+        return mVolume;
+    }
+
+    public boolean isMuted() {
+        return mMute;
+    }
+
+    public boolean isActive() {
+        return mActive;
+    }
+}
diff --git a/media/java/android/media/AudioManager.java b/media/java/android/media/AudioManager.java
index 70e0409be58..fef0e368857 100755
--- a/media/java/android/media/AudioManager.java
+++ b/media/java/android/media/AudioManager.java
@@ -927,6 +927,32 @@ public class AudioManager {
         }
     }
 
+    /** @hide */
+    @UnsupportedAppUsage
+    @RequiresPermission(android.Manifest.permission.MODIFY_AUDIO_ROUTING)
+    public int setAppVolume(String packageName, float volume) {
+        return AudioSystem.setAppVolume(packageName, volume);
+    }
+
+    /** @hide */
+    @UnsupportedAppUsage
+    @RequiresPermission(android.Manifest.permission.MODIFY_AUDIO_ROUTING)
+    public int setAppMute(String packageName, boolean mute) {
+        return AudioSystem.setAppMute(packageName, mute);
+    }
+
+    /** @hide */
+    @UnsupportedAppUsage
+    @RequiresPermission(android.Manifest.permission.MODIFY_AUDIO_ROUTING)
+    public ArrayList<AppTrackData> listAppTrackDatas() {
+        ArrayList<AppTrackData> volumes = new ArrayList<AppTrackData>();
+        int status = AudioSystem.listAppTrackDatas(volumes);
+        if (status != AudioManager.SUCCESS) {
+            return new ArrayList<AppTrackData>();
+        }
+        return volumes;
+    }
+
     /**
      * Returns the current ringtone mode.
      *
diff --git a/media/java/android/media/AudioSystem.java b/media/java/android/media/AudioSystem.java
index 842ab7c8d15..48036c9704b 100644
--- a/media/java/android/media/AudioSystem.java
+++ b/media/java/android/media/AudioSystem.java
@@ -1739,6 +1739,21 @@ public class AudioSystem
     public static native int getPreferredDeviceForStrategy(int strategy,
                                                            AudioDeviceAttributes[] device);
 
+    /**
+     * @hide
+     */
+    public static native int setAppVolume(@NonNull String packageName, float volume);
+
+    /**
+     * @hide
+     */
+    public static native int setAppMute(@NonNull String packageName, boolean mute);
+
+    /**
+     * @hide
+     */
+    public static native int listAppTrackDatas(ArrayList<AppTrackData> volumes);
+
     // Items shared with audio service
 
     /**
-- 
2.31.1.606.gdf6c4f722c

